{"version":3,"sources":["hooks/useAsync.js","pages/ProductStock.js","components/Typography/PageTitle.js","services/ProductionServices.js","services/httpService.js"],"names":["useAsync","asyncFunction","data","setData","useState","error","setError","loading","setLoading","isUpdate","setIsUpdate","currentPage","category","searchText","invoice","status","zone","time","sortedField","source","limitData","startDate","endDate","useContext","SidebarContext","useEffect","unmounted","axios","CancelToken","res","cancelToken","token","err","message","isCancel","cancel","ItemStock","ProductionServices","getProductions","itemStockData","setItemStockData","t","useTranslation","generateItemStock","itemStockMap","Map","forEach","purchase","products","product","itemLabel","label","purchaseQuantity","parseInt","quantity","existingItemData","get","updatedStockcount","stockcount","updatedLastStockQuantity","updatedLastStockDate","createdAt","set","lastStock","date","_purchase$variants$","variants","item","updatedItemStockData","map","value","key","some","push","_jsxs","_Fragment","children","_jsx","PageTitle","TableContainer","className","Table","TableHeader","TableCell","TableBody","index","TableRow","Date","toLocaleString","_ref","async","requests","getProductionById","id","createProduction","post","body","updateProduction","put","deleteProduction","delete","instance","create","baseURL","timeout","headers","Accept","interceptors","request","use","config","adminInfo","company","Cookies","JSON","parse","authorization","responseBody","response","url","then","patch"],"mappings":"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","file":"static/js/49.13b5eed7.chunk.js","sourcesContent":["import axios from \"axios\";\r\n// import Cookies from 'js-cookie';\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { SidebarContext } from \"context/SidebarContext\";\r\n\r\nconst useAsync = (asyncFunction) => {\r\n  const [data, setData] = useState([] || {});\r\n  const [error, setError] = useState(\"\");\r\n  // const [errCode, setErrCode] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const {\r\n    isUpdate,\r\n    setIsUpdate,\r\n    currentPage,\r\n    category,\r\n    searchText,\r\n    invoice,\r\n    status,\r\n    zone,\r\n    time,\r\n    sortedField,\r\n    source,\r\n    limitData,\r\n    startDate,\r\n    endDate,\r\n  } = useContext(SidebarContext);\r\n\r\n  useEffect(() => {\r\n    let unmounted = false;\r\n    let source = axios.CancelToken.source();\r\n    (async () => {\r\n      try {\r\n        const res = await asyncFunction({ cancelToken: source.token });\r\n        if (!unmounted) {\r\n          setData(res);\r\n          setError(\"\");\r\n          setLoading(false);\r\n        }\r\n      } catch (err) {\r\n        if (!unmounted) {\r\n          setError(err.message);\r\n          if (axios.isCancel(err)) {\r\n            setError(err.message);\r\n            setLoading(false);\r\n            setData([]);\r\n          } else {\r\n            setError(err.message);\r\n            setLoading(false);\r\n            setData([]);\r\n          }\r\n        }\r\n      }\r\n    })();\r\n\r\n  \r\n\r\n    setIsUpdate(false);\r\n\r\n    return () => {\r\n      unmounted = true;\r\n      source.cancel(\"Cancelled in cleanup\");\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [\r\n    isUpdate,\r\n    currentPage,\r\n    category,\r\n    searchText,\r\n    invoice,\r\n    status,\r\n    zone,\r\n    time,\r\n    sortedField,\r\n    source,\r\n    limitData,\r\n    startDate,\r\n    endDate,\r\n  ]);\r\n\r\n\r\n  return {\r\n    data,\r\n    error,\r\n    loading,\r\n  };\r\n};\r\n\r\nexport default useAsync;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableFooter,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@windmill/react-ui\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport ProductionServices from \"services/ProductionServices\";\r\nimport useAsync from \"hooks/useAsync\";\r\nimport PageTitle from \"components/Typography/PageTitle\";\r\n\r\nconst ItemStock = () => {\r\n  const { data } = useAsync(ProductionServices.getProductions);\r\n  const [itemStockData, setItemStockData] = useState([]);\r\n\r\n  const { t } = useTranslation();\r\n  const generateItemStock = () => {\r\n    const itemStockMap = new Map();\r\n  \r\n    data?.forEach((purchase) => {\r\n      purchase.products.forEach((product) => {\r\n        const itemLabel = product.label;\r\n        const purchaseQuantity = parseInt(purchase.quantity);\r\n  \r\n        const existingItemData = itemStockMap.get(itemLabel);\r\n  \r\n        if (existingItemData) {\r\n          const updatedStockcount = existingItemData.stockcount + purchaseQuantity;\r\n          const updatedLastStockQuantity = purchaseQuantity;\r\n          const updatedLastStockDate = purchase.createdAt;\r\n  \r\n          itemStockMap.set(itemLabel, {\r\n            ...existingItemData,\r\n            stockcount: updatedStockcount,\r\n            lastStock: {\r\n              quantity: updatedLastStockQuantity,\r\n              date: updatedLastStockDate,\r\n            },\r\n          });\r\n        } else {\r\n          itemStockMap.set(itemLabel, {\r\n            category: purchase?.variants[0]?.label,\r\n            item: product.label,\r\n            stockcount: purchaseQuantity,\r\n            lastStock: {\r\n              quantity: purchaseQuantity,\r\n              date: purchase.createdAt,\r\n            },\r\n          });\r\n        }\r\n      });\r\n    });\r\n  \r\n    // Merge and update the items in itemStockData\r\n    const updatedItemStockData = itemStockData.map((item) => {\r\n      const newItemData = itemStockMap.get(item.item);\r\n      return newItemData ? newItemData : item;\r\n    });\r\n  \r\n    // Add new items that were not present before\r\n    itemStockMap.forEach((value, key) => {\r\n      if (!itemStockData.some((item) => item.item === key)) {\r\n        updatedItemStockData.push(value);\r\n      }\r\n    });\r\n  \r\n    // Set the updated itemStockData\r\n    setItemStockData(updatedItemStockData);\r\n  };\r\n  \r\n  // const generateItemStock = () => {\r\n  //   const itemStockMap = new Map();\r\n\r\n  //   data?.forEach((purchase) => {\r\n  //     purchase.products.forEach((product) => {\r\n  //       const itemLabel = product.label;\r\n\r\n  //       const existingItemData = itemStockMap.get(itemLabel);\r\n  //       const purchaseQuantity = parseInt(purchase.quantity);\r\n\r\n  //       if (existingItemData) {\r\n  //         const updatedStockcount =\r\n  //           existingItemData.stockcount + purchaseQuantity;\r\n  //         const updatedLastStockQuantity = purchaseQuantity;\r\n  //         const updatedLastStockDate = purchase.createdAt;\r\n\r\n  //         itemStockMap.set(itemLabel, {\r\n  //           ...existingItemData,\r\n  //           stockcount: updatedStockcount,\r\n  //           lastStock: {\r\n  //             quantity: updatedLastStockQuantity,\r\n  //             date: updatedLastStockDate,\r\n  //           },\r\n  //         });\r\n  //       } else {\r\n  //         itemStockMap.set(itemLabel, {\r\n  //           category: purchase?.variants[0]?.label,\r\n  //           item: product.label,\r\n  //           stockcount: purchaseQuantity,\r\n  //           lastStock: {\r\n  //             quantity: purchaseQuantity,\r\n  //             date: purchase.createdAt,\r\n  //           },\r\n  //         });\r\n  //       }\r\n  //     });\r\n  //   });\r\n\r\n  //   const itemStock = Array.from(itemStockMap.values());\r\n\r\n  //   setItemStockData(itemStock);\r\n  // };\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      generateItemStock();\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      <PageTitle>{t(\"Production Stock\")}</PageTitle>\r\n\r\n      <TableContainer className=\"mb-8\">\r\n        <Table>\r\n          <TableHeader>\r\n            <tr>\r\n              <TableCell>{t(\"S No\")}</TableCell>\r\n              <TableCell>{t(\"Item\")}</TableCell>\r\n              <TableCell>{t(\"Category\")}</TableCell>\r\n              <TableCell>{t(\"Stock Count\")}</TableCell>\r\n              <TableCell>{t(\"Last Stock\")}</TableCell>\r\n            </tr>\r\n          </TableHeader>\r\n          <TableBody>\r\n            {itemStockData.map((item, index) => (\r\n              <TableRow key={index}>\r\n                <TableCell>{index + 1}</TableCell>\r\n                <TableCell>{item.item}</TableCell>\r\n                <TableCell>{item.category}</TableCell>\r\n                <TableCell>{item.stockcount}</TableCell>\r\n                <TableCell>\r\n                  Quantity: {item.lastStock.quantity}\r\n                  <br />\r\n                  Date: {new Date(item.lastStock.date).toLocaleString()}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ItemStock;\r\n","import React from 'react'\r\n\r\nconst PageTitle = ({ children }) => {\r\n  return (\r\n    <h1 className=\"my-6 text-lg font-bold text-gray-700 dark:text-gray-300\">{children}</h1>\r\n  )\r\n}\r\n\r\nexport default PageTitle\r\n","import requests from \"./httpService\";\r\nconst ProductionServices = {\r\n    getProductions: async () => {\r\n    return requests.get(\"/productions/\");\r\n  },\r\n  getProductionById: async (id) => {\r\n    return requests.get(`/productions/${id}`);\r\n  },\r\n  createProduction: async (body) => {\r\n    return requests.post(\"productions/add\", body);\r\n  },\r\n  updateProduction: async (id, body) => {\r\n    return requests.put(`/productions/${id}`, body);\r\n  },\r\n  deleteProduction: async (id, body) => {\r\n    return requests.delete(`/productions/${id}`);\r\n  },\r\n};\r\nexport default ProductionServices;\r\n\r\n","import axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst instance = axios.create({\r\n  baseURL: `${process.env.REACT_APP_API_BASE_URL}`,\r\n  timeout: 50000,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add a request interceptor\r\ninstance.interceptors.request.use(function (config) {\r\n  // Do something before request is sent\r\n  let adminInfo;\r\n  if (Cookies.get('adminInfo')) {\r\n    adminInfo = JSON.parse(Cookies.get('adminInfo'));\r\n  }\r\n\r\n  let company;\r\n\r\n  if (Cookies.get('company')) {\r\n    company = Cookies.get('company');\r\n  }\r\n\r\n  // console.log('Admin Http Services Cookie Read : ' + company);\r\n  // let companyName = JSON.stringify(company);\r\n\r\n  return {\r\n    ...config,\r\n    headers: {\r\n      authorization: adminInfo ? `Bearer ${adminInfo.token}` : null,\r\n      company: company ? company : null,\r\n    },\r\n  };\r\n});\r\n\r\nconst responseBody = (response) => response.data;\r\n\r\nconst requests = {\r\n  get: (url, body, headers) =>\r\n    instance.get(url, body, headers).then(responseBody),\r\n\r\n  post: (url, body) => instance.post(url, body).then(responseBody),\r\n\r\n  put: (url, body, headers) =>\r\n    instance.put(url, body, headers).then(responseBody),\r\n\r\n  patch: (url, body) => instance.patch(url, body).then(responseBody),\r\n\r\n  delete: (url, body) => instance.delete(url, body).then(responseBody),\r\n};\r\n\r\nexport default requests;\r\n"],"sourceRoot":""}