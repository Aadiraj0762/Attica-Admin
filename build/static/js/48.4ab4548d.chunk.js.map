{"version":3,"sources":["hooks/useAsync.js","pages/ItemStock.js","components/Typography/PageTitle.js","services/PurchaseServices.js","services/httpService.js"],"names":["useAsync","asyncFunction","data","setData","useState","error","setError","loading","setLoading","isUpdate","setIsUpdate","currentPage","category","searchText","invoice","status","zone","time","sortedField","source","limitData","startDate","endDate","useContext","SidebarContext","useEffect","unmounted","axios","CancelToken","res","cancelToken","token","err","message","isCancel","cancel","ItemStock","PurchaseServices","getAllPurchases","itemStockData","setItemStockData","remainingStock","setRemainingStock","t","useTranslation","storedItemStockData","localStorage","getItem","JSON","parse","generateItemStock","itemStockMap","Map","forEach","purchase","products","product","itemLabel","label","existingItemData","get","_purchase$category$","stockcount","parseInt","quantity","set","lastStock","vendor","title","date","createdAt","item","itemStock","Array","from","_ref","values","stockcountData","map","setItem","stringify","saveItemStockDataToLocalStorage","fetch","then","response","json","productionData","tempRemainingStockMap","production","selectedItems","selectedItem","find","itemData","newStock","remainingStockData","_ref2","matchingItem","remaining","Math","max","filter","Boolean","catch","console","_jsxs","_Fragment","children","_jsx","PageTitle","TableContainer","className","Table","TableHeader","TableCell","TableBody","index","matchingRemainingStock","stock","remainingCount","TableRow","PurchasesServices","async","requests","getPurchasesById","id","addPurchases","post","body","updatePurchase","put","deletePurchase","delete","instance","create","baseURL","timeout","headers","Accept","interceptors","request","use","config","adminInfo","company","Cookies","authorization","responseBody","url","patch"],"mappings":"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","file":"static/js/48.4ab4548d.chunk.js","sourcesContent":["import axios from \"axios\";\r\n// import Cookies from 'js-cookie';\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { SidebarContext } from \"context/SidebarContext\";\r\n\r\nconst useAsync = (asyncFunction) => {\r\n  const [data, setData] = useState([] || {});\r\n  const [error, setError] = useState(\"\");\r\n  // const [errCode, setErrCode] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const {\r\n    isUpdate,\r\n    setIsUpdate,\r\n    currentPage,\r\n    category,\r\n    searchText,\r\n    invoice,\r\n    status,\r\n    zone,\r\n    time,\r\n    sortedField,\r\n    source,\r\n    limitData,\r\n    startDate,\r\n    endDate,\r\n  } = useContext(SidebarContext);\r\n\r\n  useEffect(() => {\r\n    let unmounted = false;\r\n    let source = axios.CancelToken.source();\r\n    (async () => {\r\n      try {\r\n        const res = await asyncFunction({ cancelToken: source.token });\r\n        if (!unmounted) {\r\n          setData(res);\r\n          setError(\"\");\r\n          setLoading(false);\r\n        }\r\n      } catch (err) {\r\n        if (!unmounted) {\r\n          setError(err.message);\r\n          if (axios.isCancel(err)) {\r\n            setError(err.message);\r\n            setLoading(false);\r\n            setData([]);\r\n          } else {\r\n            setError(err.message);\r\n            setLoading(false);\r\n            setData([]);\r\n          }\r\n        }\r\n      }\r\n    })();\r\n\r\n  \r\n\r\n    setIsUpdate(false);\r\n\r\n    return () => {\r\n      unmounted = true;\r\n      source.cancel(\"Cancelled in cleanup\");\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [\r\n    isUpdate,\r\n    currentPage,\r\n    category,\r\n    searchText,\r\n    invoice,\r\n    status,\r\n    zone,\r\n    time,\r\n    sortedField,\r\n    source,\r\n    limitData,\r\n    startDate,\r\n    endDate,\r\n  ]);\r\n\r\n\r\n  return {\r\n    data,\r\n    error,\r\n    loading,\r\n  };\r\n};\r\n\r\nexport default useAsync;\r\n","// import React, { useState, useEffect } from \"react\";\r\n// import {\r\n//   Table,\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableContainer,\r\n//   TableFooter,\r\n//   TableHeader,\r\n//   TableRow,\r\n// } from \"@windmill/react-ui\";import { useTranslation } from \"react-i18next\";\r\n// import PurchaseServices from \"services/PurchaseServices\";\r\n// import useAsync from \"hooks/useAsync\";\r\n// import PageTitle from \"components/Typography/PageTitle\";\r\n\r\n// const ItemStock = () => {\r\n//   const { data } = useAsync(PurchaseServices.getAllPurchases);\r\n//   const [itemStockData, setItemStockData] = useState([]);\r\n\r\n//   const { t } = useTranslation();\r\n\r\n//   const generateItemStock = async() => {\r\n//     const itemStockMap = new Map();\r\n\r\n//     data?.forEach((purchase) => {\r\n//       purchase.products.forEach((product) => {\r\n//         const itemLabel = product.label;\r\n\r\n//         const existingItemData = itemStockMap.get(itemLabel);\r\n\r\n//         if (existingItemData) {\r\n//           // Check if the existing item stock count is higher than the current purchase quantity\r\n//           if (existingItemData.stockcount > parseInt(purchase.quantity)) {\r\n//             itemStockMap.set(itemLabel, {\r\n//               ...existingItemData,\r\n//               stockcount: existingItemData.stockcount - parseInt(purchase.quantity)* -1,\r\n//               lastStock: {\r\n//                 quantity: parseInt(purchase.quantity) , // Negative quantity for reduction\r\n//                 vendor: purchase.title,\r\n//                 date: purchase.createdAt,\r\n//               },\r\n//             });\r\n//           }\r\n//           else {\r\n//             // Increment the stock count when new purchases are made for the same item\r\n//             itemStockMap.set(itemLabel, {\r\n//               ...existingItemData,\r\n//               stockcount: existingItemData.stockcount + parseInt(purchase.quantity),\r\n//               lastStock: {\r\n//                 quantity: parseInt(purchase.quantity),\r\n//                 vendor: purchase.title,\r\n//                 date: purchase.createdAt,\r\n//               },\r\n//             });\r\n//           }\r\n//         } else {\r\n//           itemStockMap.set(itemLabel, {\r\n//             category: purchase.category[0]?.label,\r\n//             item: product.label,\r\n//             stockcount: parseInt(purchase.quantity),\r\n//             lastStock: {\r\n//               quantity: parseInt(purchase.quantity),\r\n//               vendor: purchase.title,\r\n//               date: purchase.createdAt,\r\n//             },\r\n//           });\r\n//         }\r\n//       });\r\n//     });\r\n\r\n//     const itemStock = Array.from(itemStockMap, ([item, values]) => ({\r\n//       ...values,\r\n//     }));\r\n\r\n//     setItemStockData(itemStock);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (data) {\r\n//       generateItemStock();\r\n//     }\r\n//   }, [data]);\r\n\r\n//   return (\r\n//     <>\r\n//       <PageTitle>{t(\"Item Stock\")}</PageTitle>\r\n\r\n//       <TableContainer className=\"mb-8\">\r\n//         <Table>\r\n//           <TableHeader>\r\n//             <tr>\r\n//               <TableCell>{t(\"S No\")}</TableCell>\r\n//               <TableCell>{t(\"Category\")}</TableCell>\r\n//               <TableCell>{t(\"Item\")}</TableCell>\r\n//               <TableCell>{t(\"Stock Count\")}</TableCell>\r\n//               <TableCell>\r\n//                 {t(\"Last Stock\")}\r\n//                 {/* <br/>\r\n//                 {t(\"Quantity\")}, {t(\"Vendor\")}, {t(\"Date\")} */}\r\n//               </TableCell>\r\n//             </tr>\r\n//           </TableHeader>\r\n//           {itemStockData.length > 0 && (\r\n//             <TableBody>\r\n//               {itemStockData.map((item, index) => (\r\n//                 <TableRow key={index}>\r\n//                   <TableCell>{index + 1}</TableCell>\r\n//                   <TableCell>{item.category}</TableCell>\r\n//                   <TableCell>{item.item}</TableCell>\r\n//                   <TableCell>{item.stockcount}</TableCell>\r\n//                   <TableCell>\r\n//                    Quantity :  {item.lastStock.quantity}\r\n//                    <br/>\r\n//                    Vendor : {item.lastStock.vendor}\r\n//                    <br/>\r\n//                    Date :  {item.lastStock.date}\r\n//                   </TableCell>\r\n//                 </TableRow>\r\n//               ))}\r\n//             </TableBody>\r\n//           )}\r\n//         </Table>\r\n//       </TableContainer>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default ItemStock;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableFooter,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@windmill/react-ui\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport PurchaseServices from \"services/PurchaseServices\";\r\nimport useAsync from \"hooks/useAsync\";\r\nimport PageTitle from \"components/Typography/PageTitle\";\r\n\r\nconst ItemStock = () => {\r\n  const { data } = useAsync(PurchaseServices.getAllPurchases);\r\n  const [itemStockData, setItemStockData] = useState([]);\r\n  const [remainingStock, setRemainingStock] = useState([]);\r\n\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const storedItemStockData = localStorage.getItem(\"itemStockData\");\r\n    if (storedItemStockData) {\r\n      setItemStockData(JSON.parse(storedItemStockData));\r\n    }\r\n  }, []);\r\n\r\n  const saveItemStockDataToLocalStorage = (data) => {\r\n    const stockcountData = data.map((item) => ({\r\n      item: item.item,\r\n      stockcount: item.stockcount,\r\n    }));\r\n\r\n    localStorage.setItem(\"itemStockData\", JSON.stringify(stockcountData));\r\n  };\r\n\r\n  const generateItemStock = () => {\r\n    const itemStockMap = new Map();\r\n\r\n    data?.forEach((purchase) => {\r\n      purchase.products.forEach((product) => {\r\n        const itemLabel = product.label;\r\n\r\n        const existingItemData = itemStockMap.get(itemLabel);\r\n\r\n        if (existingItemData) {\r\n          if (existingItemData.stockcount > parseInt(purchase.quantity)) {\r\n            itemStockMap.set(itemLabel, {\r\n              ...existingItemData,\r\n              stockcount:\r\n                existingItemData.stockcount - parseInt(purchase.quantity) * -1,\r\n              lastStock: {\r\n                quantity: parseInt(purchase.quantity),\r\n                vendor: purchase.title,\r\n                date: purchase.createdAt,\r\n              },\r\n            });\r\n          } else {\r\n            itemStockMap.set(itemLabel, {\r\n              ...existingItemData,\r\n              stockcount:\r\n                existingItemData.stockcount + parseInt(purchase.quantity),\r\n              lastStock: {\r\n                quantity: parseInt(purchase.quantity),\r\n                vendor: purchase.title,\r\n                date: purchase.createdAt,\r\n              },\r\n            });\r\n          }\r\n        } else {\r\n          itemStockMap.set(itemLabel, {\r\n            category: purchase.category[0]?.label,\r\n            item: product.label,\r\n            stockcount: parseInt(purchase.quantity),\r\n            lastStock: {\r\n              quantity: parseInt(purchase.quantity),\r\n              vendor: purchase.title,\r\n              date: purchase.createdAt,\r\n            },\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    const itemStock = Array.from(itemStockMap, ([item, values]) => ({\r\n      ...values,\r\n    }));\r\n\r\n    setItemStockData(itemStock);\r\n    saveItemStockDataToLocalStorage(itemStock);\r\n  };\r\n\r\n  const calculateRemainingStock = () => {\r\n    fetch(\"http://localhost:5055/api/productions/\")\r\n      .then((response) => response.json())\r\n      .then((productionData) => {\r\n        const tempRemainingStockMap = new Map();\r\n\r\n        productionData.forEach((production) => {\r\n          production.selectedItems.forEach((selectedItem) => {\r\n            const matchingItem = itemStockData.find(\r\n              (itemData) => itemData.item === selectedItem.item.label\r\n            );\r\n\r\n            if (matchingItem) {\r\n              const existingStock =\r\n                tempRemainingStockMap.get(selectedItem.item.label) || 0;\r\n              const newStock = existingStock + selectedItem.quantity;\r\n              tempRemainingStockMap.set(selectedItem.item.label, newStock);\r\n            }\r\n          });\r\n        });\r\n\r\n        const remainingStockData = Array.from(\r\n          tempRemainingStockMap,\r\n          ([item, quantity]) => {\r\n            const matchingItem = itemStockData.find(\r\n              (itemData) => itemData.item === item\r\n            );\r\n\r\n            if (matchingItem) {\r\n              const remaining = Math.max(matchingItem.stockcount - quantity, 0);\r\n              return { item, remainingStock: remaining };\r\n            }\r\n\r\n            return null;\r\n          }\r\n        ).filter(Boolean); // Filter out the null entries\r\n\r\n        setRemainingStock(remainingStockData);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching production data:\", error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      generateItemStock();\r\n    }\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    calculateRemainingStock();\r\n  }, [itemStockData]);\r\n\r\n  return (\r\n    <>\r\n      <PageTitle>{t(\"Item Stock\")}</PageTitle>\r\n\r\n      <TableContainer className=\"mb-8\">\r\n        <Table>\r\n          <TableHeader>\r\n            <tr>\r\n              <TableCell>{t(\"S No\")}</TableCell>\r\n              <TableCell>{t(\"Category\")}</TableCell>\r\n              <TableCell>{t(\"Item\")}</TableCell>\r\n              <TableCell>{t(\"Purchased Stock Count\")}</TableCell>\r\n              <TableCell>{t(\"Remaining Count\")}</TableCell>\r\n                <TableCell>{t(\"Last Stock\")}</TableCell>\r\n            </tr>\r\n          </TableHeader>\r\n          <TableBody>\r\n            {itemStockData.map((item, index) => {\r\n              const matchingRemainingStock = remainingStock.find(\r\n                (stock) => stock.item === item.item\r\n              );\r\n              const remainingCount = matchingRemainingStock\r\n                ? matchingRemainingStock.remainingStock\r\n                : 0;\r\n\r\n              return (\r\n                <TableRow key={index}>\r\n                  <TableCell>{index + 1}</TableCell>\r\n                  <TableCell>{item.category}</TableCell>\r\n                  <TableCell>{item.item}</TableCell>\r\n                  <TableCell>{item.stockcount}</TableCell>\r\n                  <TableCell>{remainingCount}</TableCell>\r\n                  <TableCell>\r\n                    Quantity: {item.lastStock.quantity}&nbsp;&nbsp;&nbsp;\r\n                    Vendor: {item.lastStock.vendor}&nbsp;&nbsp;&nbsp; \r\n                    Date:{\" \"}\r\n                    {item.lastStock.date}\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ItemStock;\r\n","import React from 'react'\r\n\r\nconst PageTitle = ({ children }) => {\r\n  return (\r\n    <h1 className=\"my-6 text-lg font-bold text-gray-700 dark:text-gray-300\">{children}</h1>\r\n  )\r\n}\r\n\r\nexport default PageTitle\r\n","import requests from \"./httpService\";\r\nconst PurchasesServices = {\r\n  getAllPurchases: async () => {\r\n    return requests.get(\"/purchases/purchases\");\r\n  },\r\n  getPurchasesById: async (id) => {\r\n    return requests.get(`/purchases/purchases/${id}`);\r\n  },\r\n  addPurchases: async (body) => {\r\n    return requests.post(\"purchases/addpurchases\", body);\r\n  },\r\n  updatePurchase: async (id, body) => {\r\n    return requests.put(`/purchases/purchases/${id}`, body);\r\n  },\r\n  deletePurchase: async (id, body) => {\r\n    return requests.delete(`/purchases/purchases/${id}`);\r\n  },\r\n};\r\nexport default PurchasesServices;\r\n\r\n","import axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst instance = axios.create({\r\n  baseURL: `${process.env.REACT_APP_API_BASE_URL}`,\r\n  timeout: 50000,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add a request interceptor\r\ninstance.interceptors.request.use(function (config) {\r\n  // Do something before request is sent\r\n  let adminInfo;\r\n  if (Cookies.get('adminInfo')) {\r\n    adminInfo = JSON.parse(Cookies.get('adminInfo'));\r\n  }\r\n\r\n  let company;\r\n\r\n  if (Cookies.get('company')) {\r\n    company = Cookies.get('company');\r\n  }\r\n\r\n  // console.log('Admin Http Services Cookie Read : ' + company);\r\n  // let companyName = JSON.stringify(company);\r\n\r\n  return {\r\n    ...config,\r\n    headers: {\r\n      authorization: adminInfo ? `Bearer ${adminInfo.token}` : null,\r\n      company: company ? company : null,\r\n    },\r\n  };\r\n});\r\n\r\nconst responseBody = (response) => response.data;\r\n\r\nconst requests = {\r\n  get: (url, body, headers) =>\r\n    instance.get(url, body, headers).then(responseBody),\r\n\r\n  post: (url, body) => instance.post(url, body).then(responseBody),\r\n\r\n  put: (url, body, headers) =>\r\n    instance.put(url, body, headers).then(responseBody),\r\n\r\n  patch: (url, body) => instance.patch(url, body).then(responseBody),\r\n\r\n  delete: (url, body) => instance.delete(url, body).then(responseBody),\r\n};\r\n\r\nexport default requests;\r\n"],"sourceRoot":""}