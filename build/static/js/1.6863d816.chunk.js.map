{"version":3,"sources":["../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getEventValue.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/useSubscribe.ts","../../src/utils/isString.ts","../../src/logic/generateWatchOutput.ts","../../src/utils/isPlainObject.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/generateId.ts","../../src/logic/getValidationModes.ts","../../src/logic/isWatched.ts","../../src/logic/updateFieldArrayRootError.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRegex.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getRadioValue.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/utils/unset.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/live.ts","../../src/utils/objectHasFunction.ts","../../src/logic/getDirtyFields.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/getRuleValue.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["element","type","value","Date","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","filter","Boolean","val","undefined","get","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","React","createContext","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","keys","length","shouldRenderFormState","formStateData","isEmptyObject","find","useSubscribe","props","_props","useRef","current","useEffect","subscription","disabled","subject","subscribe","next","unsubscribe","generateWatchOutput","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","window","HTMLElement","document","cloneObject","data","copy","Set","isWeb","Blob","FileList","isPlainObject","appendErrors","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","field","_f","currentField","ref","focus","refs","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","some","watchName","startsWith","slice","updateFieldArrayRootError","error","fieldArrayErrors","isValidElement","RegExp","defaultResult","isValid","validResult","options","values","option","attributes","defaultReturn","previous","getValidateError","isMessage","every","isBoolean","validationData","isRegex","async","inputValue","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputRef","setCustomValidity","reportValidity","isRadio","isRadioInput","isCheckBox","isRadioOrCheckbox","isEmpty","isFileInput","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getCheckboxValue","getRadioValue","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","isFunction","validateError","validationResult","isEmptyArray","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","owner","ownerDocument","defaultView","isHTMLElement","isConnected","markFieldsDirty","isParentNodeArray","objectHasFunction","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","isMultipleSelect","selectedOptions","_ref3","getResolverOptions","_fields","criteriaMode","rule","source","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","flushRootRender","_options","shouldCaptureDirtyFields","resetOptions","keepDirtyValues","delayErrorCallback","_formState","submitCount","isDirty","isLoading","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","_subjects","state","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","_updateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","validateField","getValues","_getWatch","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","getCurrentFieldValue","getEventValue","shouldSkipValidation","hasValidation","deps","watched","previousErrorLookupResult","errorLookupResult","fieldNames","convertToArrayPayload","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","invalid","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","live","_focusError","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","then","_removeUnmounted","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","argA","argB","_getFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","payload","resetField","clearErrors","inputName","setError","setFocus","shouldSelect","select","useForm","_formControl","updateFormState","useState","getProxyFormState"],"mappings":"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","file":"static/js/1.6863d816.chunk.js","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  names.has(getNodeParentName(name));\n","export default (name: string) =>\n  name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n","export default <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import React from 'react';\n\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <TFieldValues extends FieldValues, TContext = any>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => {\n  const { children, ...data } = props;\n  return (\n    <HookFormContext.Provider value={data as unknown as UseFormReturn}>\n      {children}\n    </HookFormContext.Provider>\n  );\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Control, FieldValues, FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues extends FieldValues, TContext = any>(\n  formState: FormState<TFieldValues>,\n  control: Control<TFieldValues, TContext>,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {\n    defaultValues: control._defaultValues,\n  } as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const { name, ...formState } = formStateData;\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import React from 'react';\n\nimport { Subject } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  next: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.next,\n      });\n\n    return () => {\n      subscription && subscription.unsubscribe();\n    };\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names);\n  }\n\n  if (Array.isArray(names)) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n\n  return formValues;\n};\n","import isObject from './isObject';\n\nexport default (tempObject: object) => {\n  const prototypeCopy =\n    tempObject.constructor && tempObject.constructor.prototype;\n\n  return (\n    isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf')\n  );\n};\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isObject from './isObject';\nimport isPlainObject from './isPlainObject';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (\n    !(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n    (isArray || isObject(data))\n  ) {\n    copy = isArray ? [] : {};\n\n    if (!Array.isArray(data) && !isPlainObject(data)) {\n      copy = data;\n    } else {\n      for (const key in data) {\n        copy[key] = cloneObject(data[key]);\n      }\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name?: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const { _f, ...currentField } = field;\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus) {\n          _f.ref.focus();\n          break;\n        } else if (_f.refs && _f.refs[0].focus) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(currentField)) {\n        focusFieldBy(currentField, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport compact from '../utils/compact';\nimport get from '../utils/get';\nimport set from '../utils/set';\n\nexport default <T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  error: Partial<Record<string, FieldError>>,\n  name: InternalFieldName,\n): FieldErrors<T> => {\n  const fieldArrayErrors = compact(get(errors, name));\n  set(fieldArrayErrors, 'root', error[name]);\n  set(errors, name, fieldArrayErrors);\n  return errors;\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n  isFieldArray?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) &&\n      isUndefined(ref.value) &&\n      isUndefined(inputValue)) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    isFieldArray\n      ? !Array.isArray(inputValue) || !inputValue.length\n      : required &&\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n          (isBoolean(inputValue) && !inputValue) ||\n          (isCheckBox && !getCheckboxValue(refs).isValid) ||\n          (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        (inputValue ? +inputValue : inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      const convertTimeToDate = (time: unknown) =>\n        new Date(new Date().toDateString() + ' ' + time);\n      const isTime = ref.type == 'time';\n      const isWeek = ref.type == 'week';\n\n      if (isString(maxOutput.value) && inputValue) {\n        exceedMax = isTime\n          ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n          : isWeek\n          ? inputValue > maxOutput.value\n          : valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value) && inputValue) {\n        exceedMin = isTime\n          ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n          : isWeek\n          ? inputValue < minOutput.value\n          : valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (\n    (maxLength || minLength) &&\n    !isEmpty &&\n    (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))\n  ) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction isEmptyArray(obj: unknown[]) {\n  for (const key in obj) {\n    if (!isUndefined(obj[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) && isEmptyArray(objectRef)))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","export default (value: unknown): value is HTMLElement => {\n  const owner = value ? ((value as HTMLElement).ownerDocument as Document) : 0;\n  return (\n    value instanceof\n    (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement)\n  );\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        deepEqual(data[key], formValues[key])\n          ? delete dirtyFieldsFromValues[key]\n          : (dirtyFieldsFromValues[key] = true);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : value\n      ? +value\n      : value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup<T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnPackAsyncDefaultValues,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport getValidationModes from './getValidationModes';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport updateFieldArrayRootError from './updateFieldArrayRootError';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n  flushRootRender: () => void,\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  const shouldCaptureDirtyFields =\n    props.resetOptions && props.resetOptions.keepDirtyValues;\n  let _formState: FormState<TFieldValues> = {\n    submitCount: 0,\n    isDirty: false,\n    isLoading: true,\n    isValidating: false,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    touchedFields: {},\n    dirtyFields: {},\n    errors: {},\n  };\n  let _fields = {};\n  let _defaultValues = isObject(_options.defaultValues)\n    ? cloneObject(_options.defaultValues) || {}\n    : {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  };\n  let delayErrorCallback: DelayCallback | null;\n  let timer = 0;\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T) =>\n    (wait: number) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(callback, wait);\n    };\n\n  const _updateValid = async () => {\n    if (_proxyFormState.isValid) {\n      const isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuiltInValidation(_fields, true);\n\n      if (isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n  };\n\n  const _updateIsValidating = (value: boolean) =>\n    _proxyFormState.isValidating &&\n    _subjects.state.next({\n      isValidating: value,\n    });\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method) {\n      _stateFlags.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        name,\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let shouldUpdateField = false;\n    let isPreviousDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n\n    if (!isBlurEvent || shouldDirty) {\n      if (_proxyFormState.isDirty) {\n        isPreviousDirty = _formState.isDirty;\n        _formState.isDirty = output.isDirty = _getDirty();\n        shouldUpdateField = isPreviousDirty !== output.isDirty;\n      }\n\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isPreviousDirty = get(_formState.dirtyFields, name);\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      shouldUpdateField =\n        shouldUpdateField ||\n        (_proxyFormState.dirtyFields &&\n          isPreviousDirty !== !isCurrentFieldPristine);\n    }\n\n    if (isBlurEvent) {\n      const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n      if (!isPreviousFieldTouched) {\n        set(_formState.touchedFields, name, isBlurEvent);\n        output.touchedFields = _formState.touchedFields;\n        shouldUpdateField =\n          shouldUpdateField ||\n          (_proxyFormState.touchedFields &&\n            isPreviousFieldTouched !== isBlurEvent);\n      }\n    }\n\n    shouldUpdateField && shouldRender && _subjects.state.next(output);\n\n    return shouldUpdateField ? output : {};\n  };\n\n  const shouldRenderByError = (\n    name: InternalFieldName,\n    isValid?: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid &&\n      isBoolean(isValid) &&\n      _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(props.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n      !isEmptyObject(fieldState) ||\n      shouldUpdateValid\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    _updateIsValidating(false);\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    await _options.resolver!(\n      _formValues as TFieldValues,\n      _options.context,\n      getResolverOptions(\n        name || _names.mount,\n        _fields,\n        _options.criteriaMode,\n        _options.shouldUseNativeValidation,\n      ),\n    );\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuiltInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context: {\n      valid: boolean;\n    } = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const { _f, ...fieldValue } = field;\n\n        if (_f) {\n          const isFieldArrayRoot = _names.array.has(_f.name);\n          const fieldError = await validateField(\n            field,\n            get(_formValues, _f.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n            isFieldArrayRoot,\n          );\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          !shouldOnlyCheckValid &&\n            (get(fieldError, _f.name)\n              ? isFieldArrayRoot\n                ? updateFieldArrayRootError(\n                    _formState.errors,\n                    fieldError,\n                    _f.name,\n                  )\n                : set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name));\n        }\n\n        fieldValue &&\n          (await executeBuiltInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) =>\n    generateWatchOutput(\n      names,\n      _names,\n      {\n        ...(_stateFlags.mount\n          ? _formValues\n          : isUndefined(defaultValue)\n          ? _defaultValues\n          : isString(names)\n          ? { [names]: defaultValue }\n          : defaultValue),\n      },\n      isGlobal,\n    );\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (optionRef) =>\n              (optionRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(optionRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate &&\n      trigger(name as Path<UnPackAsyncDefaultValues<TFieldValues>>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U extends SetValueConfig,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n    !_stateFlags.mount && flushRootRender();\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n    const getCurrentFieldValue = () =>\n      target.type ? getFieldValue(field._f) : getEventValue(event);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = getCurrentFieldValue();\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n        delayErrorCallback && delayErrorCallback(0);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        _proxyFormState.isValid && _updateValid();\n\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      _updateIsValidating(true);\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        if (error) {\n          isValid = false;\n        } else if (_proxyFormState.isValid) {\n          isValid = await executeBuiltInValidation(_fields, true);\n        }\n      }\n\n      if (!isPrimitive(fieldValue) || getCurrentFieldValue() === fieldValue) {\n        field._f.deps &&\n          trigger(\n            field._f.deps as\n              | FieldPath<TFieldValues>\n              | FieldPath<TFieldValues>[],\n          );\n        shouldRenderByError(name, isValid, error, fieldState);\n      } else {\n        _updateIsValidating(false);\n      }\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _updateIsValidating(true);\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuiltInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuiltInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver || !name ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => key && get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames)\n      : fieldNames.map((name) => get(values, name));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {});\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: DeepPartial<TFieldValues>,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (payload) =>\n            name(\n              _getWatch(undefined, defaultValue),\n              payload as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      ...(field || {}),\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [\n                      ...refs.filter(live),\n                      fieldRef,\n                      ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                    ],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const _focusError = () =>\n    _options.shouldFocusError &&\n    focusFieldBy(\n      _fields,\n      (key) => key && get(_formState.errors, key),\n      _names.mount,\n    );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = cloneObject(_formValues);\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors;\n          fieldValues = values;\n        } else {\n          await executeBuiltInValidation(_fields);\n        }\n\n        if (isEmptyObject(_formState.errors)) {\n          _subjects.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          if (onInvalid) {\n            await onInvalid({ ..._formState.errors }, e);\n          }\n\n          _focusError();\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, get(_defaultValues, name))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const _reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues || shouldCaptureDirtyFields) {\n        for (const fieldName of _names.mount) {\n          get(_formState.dirtyFields, fieldName)\n            ? set(values, fieldName, get(_formValues, fieldName))\n            : setValue(\n                fieldName as FieldPath<TFieldValues>,\n                get(values, fieldName),\n              );\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs)\n                ? field._f.refs[0]\n                : field._f.ref;\n\n              if (isHTMLElement(fieldReference)) {\n                const form = fieldReference.closest('form');\n                if (form) {\n                  form.reset();\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        _fields = {};\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    !_stateFlags.mount && flushRootRender();\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty:\n        keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\n          ? _formState.isDirty\n          : !!(\n              keepStateOptions.keepDefaultValues &&\n              !deepEqual(formValues, _defaultValues)\n            ),\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields:\n        keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\n          ? _formState.dirtyFields\n          : keepStateOptions.keepDefaultValues && formValues\n          ? getDirtyFields(_defaultValues, formValues)\n          : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (formValues, keepStateOptions) =>\n    _reset(\n      isFunction(formValues)\n        ? formValues(_formValues as TFieldValues)\n        : formValues,\n      keepStateOptions,\n    );\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n    const fieldReference = field && field._f;\n\n    if (fieldReference) {\n      const fieldRef = fieldReference.refs\n        ? fieldReference.refs[0]\n        : fieldReference.ref;\n\n      if (fieldRef.focus) {\n        fieldRef.focus();\n        options.shouldSelect && fieldRef.select();\n      }\n    }\n  };\n\n  if (isFunction(_options.defaultValues)) {\n    _options.defaultValues().then((values) => {\n      reset(values, _options.resetOptions);\n      _subjects.state.next({\n        isLoading: false,\n      });\n    });\n  }\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _focusError,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _reset,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport deepEqual from './utils/deepEqual';\nimport isFunction from './utils/isFunction';\nimport { FieldValues, FormState, UseFormProps, UseFormReturn } from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    isLoading: true,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    submitCount: 0,\n    dirtyFields: {},\n    touchedFields: {},\n    errors: {},\n    defaultValues: isFunction(props.defaultValues)\n      ? undefined\n      : props.defaultValues,\n  });\n\n  if (!_formControl.current) {\n    _formControl.current = {\n      ...createFormControl(props, () =>\n        updateFormState((formState) => ({ ...formState })),\n      ),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n  control._options = props;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    next: (value: FieldValues) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n\n    control._removeUnmounted();\n  });\n\n  React.useEffect(() => {\n    if (props.values && !deepEqual(props.values, control._defaultValues)) {\n      control._reset(props.values, control._options.resetOptions);\n    }\n  }, [props.values, control]);\n\n  React.useEffect(() => {\n    formState.submitCount && control._focusError();\n  }, [control, formState.submitCount]);\n\n  _formControl.current.formState = getProxyFormState(formState, control);\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}